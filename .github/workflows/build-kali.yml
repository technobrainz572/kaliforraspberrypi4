name: Build Custom Kali ARM Image for Raspberry Pi 4 (64-bit)

on:
  workflow_dispatch:

jobs:
  build-base-image:
    runs-on: self-hosted
    steps:
      - name: Clean Working Directory
        run: |
          echo "Cleaning working directory at $(date)"
          sudo rm -rf /home/syed/actions-runner/_work/kaliforraspberrypi4/kaliforraspberrypi4/*
          sudo rm -rf /home/syed/kali-image-base/*
          echo "Cleanup completed at $(date)"

      - name: Install Git
        run: |
          sudo apt update
          sudo apt install -y git
          git --version
          echo "Git installed at $(date)"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Clean Submodules
        run: |
          git submodule deinit -f . || true
          git submodule update --init --recursive || true
          echo "Submodules cleaned at $(date)"

      - name: Install Base Dependencies
        run: |
          sudo apt update
          sudo apt install -y git curl wget qemu-user-static debootstrap coreutils systemd-container gnupg \
            build-essential bc kmod libncurses-dev libelf-dev libssl-dev bison flex crossbuild-essential-arm64 \
            parted xz-utils eatmydata mmdebstrap e2fsprogs
          echo "Dependencies installed at $(date)"

      - name: Install kali-archive-keyring
        run: |
          wget https://kali.download/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb
          sudo dpkg -i kali-archive-keyring_2024.1_all.deb
          rm kali-archive-keyring_2024.1_all.deb
          echo "Keyring installed at $(date)"

      - name: Set Safe TERM Variable
        run: echo "TERM=xterm-256color" >> $GITHUB_ENV

      - name: Clone Kali ARM Build Scripts
        run: |
          git clone --recurse-submodules https://gitlab.com/kalilinux/build-scripts/kali-arm.git
          cd kali-arm
          chmod +x *.sh
          echo "Kali ARM scripts cloned at $(date)"

      - name: Test Network Connectivity
        run: |
          echo "Testing network connectivity at $(date)"
          ping -c 10 github.com
          curl -I https://github.com/raspberrypi/linux.git
          echo "Network test completed at $(date)"

      - name: Clone Raspberry Pi Kernel Source
        run: |
          set -x  # Enable command tracing
          git config --global http.postBuffer 524288000
          git config --global core.compression 0
          git config --global http.lowSpeedLimit 1000
          git config --global http.lowSpeedTime 60
          mkdir -p linux
          cd linux
          git init
          git remote add origin https://github.com/raspberrypi/linux.git
          for i in 1 2 3; do
            echo "Attempting clone (try $i of 3) at $(date)"
            git fetch --depth=1 origin rpi-6.6.y 2>&1 | tee -a ../clone.log && git checkout rpi-6.6.y && break
            echo "Clone attempt $i failed at $(date), retrying in 10 seconds..."
            sleep 10
          done
          if [ ! -f Makefile ]; then
            echo "Error: Failed to clone kernel repo after 3 attempts at $(date)"
            cat ../clone.log
            echo "Falling back to local tarball..."
            cd ..
            wget -O linux.tar.gz https://github.com/raspberrypi/linux/archive/refs/heads/rpi-6.6.y.tar.gz
            tar -xzf linux.tar.gz
            mv linux-rpi-6.6.y linux
            cd linux
            git init
            git add .
            git commit -m "Imported rpi-6.6.y from tarball"
            git branch -M rpi-6.6.y
          fi
          echo "Kernel source ready at $(date)"

      - name: Configure Custom Kernel for Pentesting
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcm2711_defconfig
          sed -i 's/# CONFIG_BT_HCIUART is not set/CONFIG_BT_HCIUART=y/' .config
          sed -i 's/# CONFIG_BT_HCIUART_H4 is not set/CONFIG_BT_HCIUART_H4=y/' .config
          sed -i 's/# CONFIG_BT_HCIUSB is not set/CONFIG_BT_HCIUSB=y/' .config
          echo "CONFIG_CFG80211=y" >> .config
          echo "CONFIG_MAC80211=y" >> .config
          echo "CONFIG_RFKILL=y" >> .config
          echo "CONFIG_USB_STORAGE=y" >> .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          echo "Kernel configured at $(date)"

      - name: Compile Custom Kernel
        run: |
          cd linux
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) Image modules dtbs
          mkdir -p ../kernel-build/overlays
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- INSTALL_MOD_PATH=../kernel-build modules_install
          cp arch/arm64/boot/Image ../kernel-build/kernel8.img
          cp arch/arm64/boot/dts/broadcom/*.dtb ../kernel-build/
          cp arch/arm64/boot/dts/overlays/*.dtbo ../kernel-build/overlays/
          cp -r . ../kernel-source
          echo "Kernel compiled at $(date)"

      - name: Build Kali Image with Custom Kernel
        run: |
          cd kali-arm
          sudo ARCH=arm64 bash -x ./raspberry-pi-64-bit.sh 2>&1 | tee build.log || { echo "Script failed, check build.log"; exit 1; }
          echo "Disk usage before resize:"
          df -h
          echo "Listing all .img files in repo:"
          find /home/syed/actions-runner/_work -name "*.img"
          echo "Contents of images/ dir:"
          ls -la images/
          IMAGE_FILE=$(find . -name "kali-*.img" | head -n 1)
          if [ -z "$IMAGE_FILE" ]; then
            echo "Error: No Kali image file found"
            echo "Last 20 lines of build.log:"
            tail -n 20 build.log
            exit 1
          fi
          echo "Found image: $IMAGE_FILE at $(date)"
          sudo truncate -s 20G "$IMAGE_FILE"
          sudo parted -s "$IMAGE_FILE" resizepart 2 100%
          ROOT_OFFSET=$(sudo fdisk -l "$IMAGE_FILE" | grep -m1 'img2' | awk '{print $2 * 512}')
          if [ -z "$ROOT_OFFSET" ]; then
            echo "Error: Could not determine root offset, falling back to 5242880"
            ROOT_OFFSET=5242880
          fi
          echo "Root partition offset: $ROOT_OFFSET"
          LOOP_DEV=$(sudo losetup -f --show -o "$ROOT_OFFSET" "$IMAGE_FILE")
          if [ -z "$LOOP_DEV" ]; then
            echo "Error: Failed to set up loop device"
            sudo fdisk -l "$IMAGE_FILE"
            exit 1
          fi
          echo "Loop device: $LOOP_DEV"
          sudo e2fsck -f -y "$LOOP_DEV" || { echo "e2fsck failed"; sudo fdisk -l "$IMAGE_FILE"; sudo losetup -d "$LOOP_DEV"; exit 1; }
          sudo resize2fs "$LOOP_DEV" || { echo "resize2fs failed"; sudo fdisk -l "$IMAGE_FILE"; sudo losetup -d "$LOOP_DEV"; exit 1; }
          sudo losetup -d "$LOOP_DEV"
          BOOT_OFFSET=$(sudo fdisk -l "$IMAGE_FILE" | grep -m1 'img1' | awk '{print $2 * 512}')
          if [ -z "$BOOT_OFFSET" ]; then
            echo "Error: Could not determine boot offset, falling back to 1048576"
            BOOT_OFFSET=1048576
          fi
          echo "Using boot offset: $BOOT_OFFSET"
          sudo mkdir -p /mnt/boot
          sudo mount -o loop,offset=$BOOT_OFFSET "$IMAGE_FILE" /mnt/boot || { echo "Boot mount failed"; sudo fdisk -l "$IMAGE_FILE"; exit 1; }
          sudo cp ../kernel-build/kernel8.img /mnt/boot/
          sudo cp ../kernel-build/*.dtb /mnt/boot/
          sudo cp -r ../kernel-build/overlays /mnt/boot/
          sudo umount /mnt/boot
          echo "Using root offset: $ROOT_OFFSET"
          sudo mkdir -p /mnt/root
          sudo mount -o loop,offset=$ROOT_OFFSET "$IMAGE_FILE" /mnt/root || { echo "Root mount failed"; sudo fdisk -l "$IMAGE_FILE"; exit 1; }
          sudo cp -r ../kernel-build/lib/modules/* /mnt/root/lib/modules/
          sudo cp -r ../kernel-source /mnt/root/usr/src/linux
          echo "Disk usage after resize at $(date):"
          df -h
          sudo mkdir -p /home/syed/kali-image-base
          sudo cp "$IMAGE_FILE" /home/syed/kali-image-base/kali-base.img
          sudo umount /mnt/root
          echo "Base image stored at $(date)"

      - name: Upload Base Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kali-base-image
          path: /home/syed/kali-image-base/kali-base.img
          if-no-files-found: error

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-base
          path: |
            kali-arm/build.log
            clone.log
          if-no-files-found: warn

  customize-image:
    runs-on: self-hosted
    needs: build-base-image
    steps:
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y git curl wget systemd-container xz-utils e2fsprogs
          echo "Dependencies installed at $(date)"

      - name: Download Base Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: kali-base-image
          path: /home/syed/kali-image-base/

      - name: Prepare Base Image
        run: |
          IMAGE_FILE=/home/syed/kali-image-base/kali-base.img
          if [ ! -f "$IMAGE_FILE" ]; then
            echo "Error: Base image not found on runner"
            exit 1
          fi
          ROOT_OFFSET=$(sudo fdisk -l "$IMAGE_FILE" | grep -m1 'img2' | awk '{print $2 * 512}')
          if [ -z "$ROOT_OFFSET" ]; then
            echo "Error: Could not determine root offset, falling back to 5242880"
            ROOT_OFFSET=5242880
          fi
          echo "Using root offset: $ROOT_OFFSET"
          sudo mkdir -p /mnt/root
          sudo mount -o loop,offset=$ROOT_OFFSET "$IMAGE_FILE" /mnt/root || { echo "Root mount failed"; sudo fdisk -l "$IMAGE_FILE"; exit 1; }
          echo "Base image prepared at $(date)"

      - name: Install Pentesting Tools and Drivers
        run: |
          sudo systemd-nspawn -D /mnt/root /bin/bash -c "
            apt clean
            apt update
            apt install -y kali-linux-default aircrack-ng kismet bluez bluez-tools btscanner dkms
            git clone https://github.com/aircrack-ng/rtl8188eus.git
            cd rtl8188eus
            make -j$(nproc) KDIR=/usr/src/linux
            make install KDIR=/usr/src/linux
            modprobe 8188eu
          "
          echo "Pentesting tools installed at $(date)"

      - name: Install CSR Bluetooth Firmware
        run: |
          sudo systemd-nspawn -D /mnt/root /bin/bash -c "
            apt clean
            apt update
            apt install -y firmware-linux firmware-linux-nonfree
            mkdir -p /lib/firmware
            wget -O /lib/firmware/BCM20702A0-0a12-0001.hcd \
              'https://github.com/RPi-Distro/firmware-nonfree/raw/master/brcm/BCM20702A0-0a12-0001.hcd'
          "
          echo "Bluetooth firmware installed at $(date)"

      - name: Cleanup Mounts and Compress Image
        run: |
          sudo umount /mnt/root
          cd /home/syed/kali-image-base
          sudo xz -0 -T0 -v kali-base.img
          ls -la
          echo "Image compressed at $(date)"

      - name: Upload Final Image
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kali-linux-raspberrypi4-custom
          path: /home/syed/kali-image-base/kali-base.img.xz
          if-no-files-found: error
